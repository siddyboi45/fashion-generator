# -*- coding: utf-8 -*-
"""DCGAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1jyaQxVxgNPJQaomDrtErI3Gc1uwCNn

## DCGAN Implementation on DeepFashion Dataset
"""

import shutil
import json
import os
from google.colab import drive
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
import pickle
drive.mount('/content/drive/')

from __future__ import print_function
#%matplotlib inline
import argparse
import os
import random
import torch
import torch.nn as nn
import torch.nn.parallel
import torch.backends.cudnn as cudnn
import torch.optim as optim
import torch.utils.data
import torchvision.datasets as dset
import torchvision.transforms as transforms
import torchvision.utils as vutils
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from IPython.display import HTML

# Set random seem for reproducibility
manualSeed = 999
print("Random Seed: ", manualSeed)
random.seed(manualSeed)
torch.manual_seed(manualSeed)

# Directory of cropped images from preprocessing
dataroot = "/content/cropped/img/"

# Number of workers for dataloader
workers = 2

# Batch size during training
batch_size = 128

# resized size of each image. Transform is used to perform resizing
image_size = 64

# Number of channels, which is 3 in this case
nc = 3

# Size of z latent vector
nz = 100

# Size of feature maps in generator
ngf = 64

# Size of feature maps in discriminator
ndf = 64

# Number of epochs to train DCGAN
num_epochs = 200

# In case of GPU availability
ngpu = 1

# Hyperparameters for optimizers
# Learning rate
lr = 0.0002

# Beta1 hyperparam for Adam optimizer
beta1 = 0.5

# Since we have structure the folders in this way we can directly use the ImageFolder function in pytorch
# Create the dataset
dataset = dset.ImageFolder(root=dataroot,
                           transform=transforms.Compose([
                               transforms.Resize(image_size),
                               transforms.CenterCrop(image_size),
                               transforms.ToTensor(),
                               transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),
                           ]))
# Create the dataloader from ImageFolder output
dataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size,
                                         shuffle=True, num_workers=workers)

device = torch.device("cuda:0" if (torch.cuda.is_available() and ngpu > 0) else "cpu")

# Sample plot with 64 images
real_batch = next(iter(dataloader))
plt.figure(figsize=(8,8))
plt.axis("off")
plt.title("Training Images")
plt.imshow(np.transpose(vutils.make_grid(real_batch[0].to(device)[:64], padding=2, normalize=True).cpu(),(1,2,0)))

# Initialize weights of each layer
# Followed from DCGAN paper implementation
def weights_init(m):
    classname = m.__class__.__name__
    if classname.find('Conv') != -1:
        nn.init.normal_(m.weight.data, 0.0, 0.02)
    elif classname.find('BatchNorm') != -1:
        nn.init.normal_(m.weight.data, 1.0, 0.02)
        nn.init.constant_(m.bias.data, 0)

# Generator code for DCGAN
# Architecture is based on DCGAN Paper implementation
# Modified for input and output sizes accordingly

class Generator(nn.Module):
    def __init__(self, ngpu):
        super(Generator, self).__init__()
        self.ngpu = ngpu
        self.main = nn.Sequential(

            nn.ConvTranspose2d( nz, ngf * 8, 4, 1, 0, bias=False),
            nn.BatchNorm2d(ngf * 8),
            nn.ReLU(True),

            nn.ConvTranspose2d(ngf * 8, ngf * 4, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ngf * 4),
            nn.ReLU(True),

            nn.ConvTranspose2d( ngf * 4, ngf * 2, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ngf * 2),
            nn.ReLU(True),

            nn.ConvTranspose2d( ngf * 2, ngf, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ngf),
            nn.ReLU(True),

            nn.ConvTranspose2d( ngf, nc, 4, 2, 1, bias=False),
            nn.Tanh()

        )

    def forward(self, input):
        return self.main(input)
      
 
# Initialize generator object
netG = Generator(ngpu).to(device)

# Incorporate GPU if available
if (device.type == 'cuda') and (ngpu > 1):
    netG = nn.DataParallel(netG, list(range(ngpu)))

# Initialize random weight using the weights_init function
netG.apply(weights_init)

# Model summary
print(netG)

# Discriminator code for DCGAN
# Architecture is based on DCGAN Paper implementation
# Modified for input and output sizes accordingly

class Discriminator(nn.Module):
    def __init__(self, ngpu):
        super(Discriminator, self).__init__()
        self.ngpu = ngpu
        self.main = nn.Sequential(

            nn.Conv2d(nc, ndf, 4, 2, 1, bias=False),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(ndf, ndf * 2, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 2),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(ndf * 2, ndf * 4, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 4),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(ndf * 4, ndf * 8, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 8),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(ndf * 8, 1, 4, 1, 0, bias=False),
            nn.Sigmoid()
        )

    def forward(self, input):
        return self.main(input)
      
      
# Initialize discriminator object
netD = Discriminator(ngpu).to(device)

# Incorporate GPU if available
if (device.type == 'cuda') and (ngpu > 1):
    netD = nn.DataParallel(netD, list(range(ngpu)))

# Initialize random weight using the weights_init function
netD.apply(weights_init)

# Model summary
print(netD)

# Commented out IPython magic to ensure Python compatibility.
# DCGAN Train phase is taken from DCGAN paper implementation
# Modified for folder structure and data structure

from traitlets.traitlets import Float

# We have chosen the Binray Cross Entropy Loss since it is the most commonly used loss function
criterion = nn.BCELoss()

# fixed noise to feed generator to generate fake images
fixed_noise = torch.randn(64, nz, 1, 1, device=device)

# Set real and fake labels
real_label = 1
fake_label = 0

# Setup Adam optimizers for both G and D
optimizerD = optim.Adam(netD.parameters(), lr=lr, betas=(beta1, 0.999))
optimizerG = optim.Adam(netG.parameters(), lr=lr, betas=(beta1, 0.999))

# Training Loop

# Initialize losses and images to empty lists. They get appended in each epoch
img_list = []
G_losses = []
D_losses = []
iters = 0

print("Starting Training Loop...")
# For each epoch
for epoch in range(num_epochs):
    # For each batch in the dataloader
    for i, data in enumerate(dataloader, 0):
      ############################
      # (1) Update D network: maximize log(D(x)) + log(1 - D(G(z)))
      ###########################
      ## Train with all-real batch
      netD.zero_grad()
      # Format batch
      real_cpu = data[0].to(device)
      b_size = real_cpu.size(0)
      # print("b_size ", b_size)
      label = torch.full((b_size,), real_label, dtype = float, device=device)
      # Forward pass real batch through D
      output = netD(real_cpu).view(-1)
      # print("output ", output.shape)
      # Calculate loss on all-real batch
      print('epoch is', epoch)
      print('i is', i)
      print('iters is', iters)
      # print(type(output))
      # print(type(label))
      errD_real = criterion(output, label.float())
      # Calculate gradients for D in backward pass
      errD_real.backward()
      D_x = output.mean().item()

      ## Train with all-fake batch
      # Generate batch of latent vectors
      noise = torch.randn(b_size, nz, 1, 1, device=device)
      # Generate fake image batch with G
      fake = netG(noise)
      label.fill_(fake_label)
      # Classify all fake batch with D
      output = netD(fake.detach()).view(-1)
      # Calculate D's loss on the all-fake batch
      errD_fake = criterion(output, label.float())
      # Calculate the gradients for this batch
      errD_fake.backward()
      D_G_z1 = output.mean().item()
      # Add the gradients from the all-real and all-fake batches
      errD = errD_real + errD_fake
      # Update D
      optimizerD.step()

      ############################
      # (2) Update G network: maximize log(D(G(z)))
      ###########################
      netG.zero_grad()
      label.fill_(real_label)  # fake labels are real for generator cost
      # Since we just updated D, perform another forward pass of all-fake batch through D
      output = netD(fake).view(-1)
      # Calculate G's loss based on this output
      errG = criterion(output, label.float())
      # Calculate gradients for G
      errG.backward()
      D_G_z2 = output.mean().item()
      # Update G
      optimizerG.step()

      # Output training stats
      if i % 50 == 0:
        print('[%d/%d][%d/%d]\tLoss_D: %.4f\tLoss_G: %.4f\tD(x): %.4f\tD(G(z)): %.4f / %.4f'
#                 % (epoch, num_epochs, i, len(dataloader),
                    errD.item(), errG.item(), D_x, D_G_z1, D_G_z2))

      # Save Losses for plotting later
      G_losses.append(errG.item())
      D_losses.append(errD.item())

      # Check how the generator is doing by saving G's output on fixed_noise
      if (iters % 250 == 0) or ((epoch == num_epochs-1) and (i == len(dataloader)-1)):
          with torch.no_grad():
              fake = netG(fixed_noise).detach().cpu()
          img_list.append(vutils.make_grid(fake, padding=2, normalize=True))
          
          # Save model configuration by storing generator and discriminator losses and also a generator output
          with open('/content/drive/MyDrive/G_losses.pkl', 'wb') as f:
            pickle.dump(G_losses, f)
          f.close()
          with open('/content/drive/MyDrive/D_losses.pkl', 'wb') as f:
            pickle.dump(D_losses, f)
          f.close()
          with open('/content/drive/MyDrive/img_list.pkl', 'wb') as f:
            pickle.dump(img_list, f)
          f.close()

      iters += 1

# Plot losses against each other. Losses are obtained from above training phase
import matplotlib.pyplot as plt
  
# plot lines
plt.figure(figsize=(20, 10))
plt.plot(G_losses, label = "Generator Loss", linestyle="-")
plt.plot(D_losses, label = "Discriminator Loss", linestyle="-")
plt.legend()
plt.show()

# Plot model generated images and real images side by side to perform a qualitative comparison of the model

with open('/content/drive/MyDrive/img_list.pkl', 'rb') as f:
    img_list = pickle.load(f)

# Generate a batch of real images from the dataloader
real_batch = next(iter(dataloader))

# Plot real images
plt.figure(figsize=(15,15))
plt.subplot(1,2,1)
plt.axis("off")
plt.title("Real Images")
plt.imshow(np.transpose(vutils.make_grid(real_batch[0].to(device)[:64], padding=5, normalize=True).cpu(),(1,2,0)))

# Plot fake images from the last epoch
plt.subplot(1,2,2)
plt.axis("off")
plt.title("Fake Images")
plt.imshow(np.transpose(img_list[-1],(1,2,0)))
plt.show()